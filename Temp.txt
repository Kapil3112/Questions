tcs code#tcs code2ftes ds#tas2 ds
1#1#Asset Finance#Asset Finance
1#2#Asset Finance#Plant Hire
2‡1#Fleet#Vehicle Finance / Lease
2=2+Fleet#car Hire
2#3#Fleet#DVLA
2‡4#Fleet#Servicing
3#1#Invoice Finance#Invoice
Finance
3#2#Invoice Finance#Trade & Supply Finance
4#null#Foreign Exchange#null
5#null#Merchant Services#null
6#1#Credit Cards#Credit cards
6+2+Credit Cards#Behavioural Credit Cards
7#1#Lending#Behavioural Lending
7#2#Lending#Peer to Peer / Crowdfunding
7#null#Lending#null
8#null#Pensions#null
9#null#Mortgages#null
10#null#Insurance#null
12#null#Deposits#null
12*null tothes. Bankingtnui.
13#null#Merchant Services Payments (Debits) #null
14#null‡LBG+null
15#null#Gas & Electricity#null
16#null#Fuel#null
17#null#Salaries / Wages / Payroll#null
18#2#HMRC#Corporation Tax
18#3#HMRC#VAT
18‡4#HMRC#Customs & Excise
18#5#HMRC#DCLG
18#6#HMRC#Other
19#1#Council Payments#Council Tax
19#2+Council Payments#Other Council Payments
20 null#Importing#null
217null#Exporting#null
22#nu11#IT#nu11
23#null#Consultancy#null
24#null#Mergers & Acquisitions#null
25#null#PR & Advertisinq#null
26#null#Intellectual Property#null
27#null#Equity Investment#null
28#null#Research
§ Development#null
29#null#Recruitment#null
30#null#Surveying / Conveyancing #null
31#null#Private Planning#null
32#null#Land Registry#null
33#null#Flights#null
34#null#Hotels#null
35#null#Estate Agents#null
36#null#Telecoms / Media
Broadband#null
37#null#Water Services#null
38+null#Waste & Recycling#null
39#1#Accountancy#Online
39+2#Accountancy#Traditional
40#1#Couriers#Post & Telecommunication
40#2‡Couriers#Industrial Transport
41#null#Healthcare#null
42#null#Building Supplies‡null
43#null#Agriculture Supplies#null
44#null#Debt Collection#null
45#null#Motor Supplies#null
46#null#Retail#null

tcs code#tcs code2ftes ds#tas2 ds
1#1#Asset Finance#Asset Finance
1#2#Asset Finance#Plant Hire
2‡1#Fleet#Vehicle Finance / Lease
2=2+Fleet#car Hire
2#3#Fleet#DVLA
2‡4#Fleet#Servicing
3#1#Invoice Finance#Invoice
Finance
3#2#Invoice Finance#Trade & Supply Finance
4#null#Foreign Exchange#null
5#null#Merchant Services#null
6#1#Credit Cards#Credit cards
6+2+Credit Cards#Behavioural Credit Cards
7#1#Lending#Behavioural Lending
7#2#Lending#Peer to Peer / Crowdfunding
7#null#Lending#null
8#null#Pensions#null
9#null#Mortgages#null
10#null#Insurance#null
12#null#Deposits#null
12*null tothes. Bankingtnui.
13#null#Merchant Services Payments (Debits) #null
14#null‡LBG+null
15#null#Gas & Electricity#null
16#null#Fuel#null
17#null#Salaries / Wages / Payroll#null
18#2#HMRC#Corporation Tax
18#3#HMRC#VAT
18‡4#HMRC#Customs & Excise
18#5#HMRC#DCLG
18#6#HMRC#Other
19#1#Council Payments#Council Tax
19#2+Council Payments#Other Council Payments
20 null#Importing#null
217null#Exporting#null
22#nu11#IT#nu11
23#null#Consultancy#null
24#null#Mergers & Acquisitions#null
25#null#PR & Advertisinq#null
26#null#Intellectual Property#null
27#null#Equity Investment#null
28#null#Research
§ Development#null
29#null#Recruitment#null
30#null#Surveying / Conveyancing #null
31#null#Private Planning#null
32#null#Land Registry#null
33#null#Flights#null
34#null#Hotels#null
35#null#Estate Agents#null
36#null#Telecoms / Media
Broadband#null
37#null#Water Services#null
38+null#Waste & Recycling#null
39#1#Accountancy#Online
39+2#Accountancy#Traditional
40#1#Couriers#Post & Telecommunication
40#2‡Couriers#Industrial Transport
41#null#Healthcare#null
42#null#Building Supplies‡null
43#null#Agriculture Supplies#null
44#null#Debt Collection#null
45#null#Motor Supplies#null
46#null#Retail#null
47#1#Groceries#Wholesale
47#2#croceries#Supermarkets
48#null#Restaurants - Pubs § Bars#null
49#null#Digital Entertainment+null
50#null#Construction#null
51+null#Leisure+null
52#null#Commodities & Mining#null
53#null#Aerospace
§ Defence#null
54#null#Real Estate#null
55#null#Education#null
56#null#Outsourcing#null
57#null#Facilities Management#null
58#1#Passenger Transport#Land
58#2#Passenger Transport#Water
60#null#Legal#null
61#null#Public Administration#null
62#null#Repair Services#null
63#null#Paper/Publishing/Printing/Media#null
64#null#Personal Services#null
65#null#Membership Organisations‡null
66#null#Vets‡null

{% macro array_agg(column_name) %}
    SELECT ARRAY_AGG({{ column_name }}) AS aggregated_array
{% endmacro %}
{% macro array_min(arr) %}
    SELECT MIN(value) AS min_value
    FROM UNNEST({{ arr }}) AS value
{% endmacro %}
SELECT
  "PTY ID",
  "AGRMNT ID",
  "EVENT START DIV",
  "REIATD AGRMNT NO",
  "ABS AMOUNT",
  "EVENT ACTVTY NR CHECK",
  COUNT("EVENT ID") AS debit_credit_count,
  CASE
    WHEN COUNT("EVENT ID") <= (
      SELECT MIN(cnt) FROM (
        SELECT COUNT("EVENT ID") AS cnt
        FROM sorted_dups
        GROUP BY "PTY ID", "AGRMNT ID", "EVENT START DIV", "REIATD AGRMNT NO", "ABS AMOUNT", "EVENT ACTVTY NR CHECK"
      ) subquery
    ) THEN COUNT("EVENT ID")
    ELSE (
      SELECT MIN(cnt) FROM (
        SELECT COUNT("EVENT ID") AS cnt
        FROM sorted_dups
        GROUP BY "PTY ID", "AGRMNT ID", "EVENT START DIV", "REIATD AGRMNT NO", "ABS AMOUNT", "EVENT ACTVTY NR CHECK"
      ) subquery
    )
  END AS match_count
FROM
  sorted_dups
GROUP BY
  "PTY ID", "AGRMNT ID", "EVENT START DIV", "REIATD AGRMNT NO", "ABS AMOUNT", "EVENT ACTVTY NR CHECK"


-- my_model.sql

-- Import necessary dbt packages
{% import "array" as array %}
{% import "dbt_utils" as dbt_utils %}

-- Create 'dups' table using subset of duplicated rows
WITH dups AS (
  SELECT *
  FROM {{ ref('df_all') }}
  WHERE (PTY_ID, EVENT_START_DT, RELATD_AGRMNT_NO, ABS_AMOUNT) IN (
    SELECT PTY_ID, EVENT_START_DT, RELATD_AGRMNT_NO, ABS_AMOUNT
    FROM {{ ref('df_all') }}
    GROUP BY PTY_ID, EVENT_START_DT, RELATD_AGRMNT_NO, ABS_AMOUNT
    HAVING COUNT(*) > 1
  )
)

-- Create 'sorted_dups' table by sorting 'dups' by specified columns
, sorted_dups AS (
  SELECT *
  FROM dups
  ORDER BY PTY_ID, EVENT_START_DT, EVENT_ID
)

-- Calculate 'type_count' using dbt_utils pivot table
, type_count AS (
  SELECT *
  FROM {{ dbt_utils.pivot(
    source_name='sorted_dups',
    value_name='TYPE',
    index_columns=['PTY_ID', 'AGRMNT_ID', 'EVENT_START_DT', 'RELATD_AGRMNT_NO', 'ABS_AMOUNT', 'EVENT_ACTVTY_NR_CHECK'],
    aggregation='nunique'
  ) }}
)

-- Rename 'TYPE' column to 'TYPE_COUNT' in 'type_count' table
, type_count_renamed AS (
  SELECT PTY_ID, AGRMNT_ID, EVENT_START_DT, RELATD_AGRMNT_NO, ABS_AMOUNT, EVENT_ACTVTY_NR_CHECK, "TYPE" AS "TYPE_COUNT"
  FROM type_count
)

-- Join 'sorted_dups' with 'type_count_renamed' table
, sorted_dups_with_type_count AS (
  SELECT *
  FROM sorted_dups
  LEFT JOIN type_count_renamed USING (PTY_ID, AGRMNT_ID, EVENT_START_DT, RELATD_AGRMNT_NO, ABS_AMOUNT, EVENT_ACTVTY_NR_CHECK)
)

-- Filter rows where 'TYPE_COUNT' is 2 in 'sorted_dups_with_type_count' table
, sorted_dups_filtered AS (
  SELECT *
  FROM sorted_dups_with_type_count
  WHERE "TYPE_COUNT" = 2
)

-- Calculate 'debit_credit_count' using dbt_utils pivot table
, debit_credit_count AS (
  SELECT *
  FROM {{ dbt_utils.pivot(
    source_name='sorted_dups_filtered',
    value_name='EVENT_ID',
    index_columns=['PTY_ID', 'AGRMNT_ID', 'RELATD_AGRMNT_NO', 'EVENT_START_DT', 'ABS_AMOUNT', 'EVENT_ACTVTY_NR_CHECK'],
    columns=['TYPE'],
    aggregation='count'
  ) }}
)

-- Calculate 'MATCH_COUNT' and select necessary columns in 'debit_credit_count' table
, debit_credit_count_with_match_count AS (
  SELECT *, {{ array.min(array([col('ELECT', 'MATCH_COUNT') for col in debit_credit_count.column_names()])) }} AS "MATCH_COUNT"
  FROM debit_credit_count
)

-- Reset index in 'debit_credit_count_with_match_count' table
, debit_credit_count_reset_index AS (
  SELECT *
  FROM debit_credit_count_with_match_count
  ORDER BY "MATCH_COUNT"
  LIMIT 1 -- Assuming you only want the row with the minimum "MATCH_COUNT"
)

-- Join

 'sorted_dups_filtered' with 'debit_credit_count_reset_index' table
, sorted_dups_with_match_count AS (
  SELECT *
   FROM sorted_dups_filtered
  LEFT JOIN debit_credit_count_reset_index USING (PTY_ID, AGRMNT_ID, RELATD_AGRMNT_NO, EVENT_START_DT, ABS_AMOUNT, EVENT_ACTVTY_NR_CHECK)
)

-- Calculate 'CUMUL_COUNT' using GROUP BY and cumulative count
, sorted_dups_with_cumul_count AS (
  SELECT *, ROW_NUMBER() OVER (PARTITION BY PTY_ID, AGRMNT_ID, EVENT_START_DT, RELATD_AGRMNT_NO, ABS_AMOUNT, EVENT_ACTVTY_NR_CHECK, "TYPE" ORDER BY EVENT_ID) - 1 AS "CUMUL_COUNT"
  FROM sorted_dups_with_match_count
)

-- Final filtered 'sorted_dups' table with 'CUMUL_COUNT' condition
SELECT *
FROM sorted_dups_with_cumul_count
WHERE "CUMUL_COUNT" < "MATCH_COUNT"
```

In the above dbt SQL code, the different stages of the transformation are broken down into multiple CTEs (Common Table Expressions) to perform the necessary calculations and joins. Each CTE builds on the previous one to achieve the desired result.

Make sure to replace `'df_all'` with the appropriate reference to the source table in your dbt project. Adjust the column names as per your table schema.

Note: This code assumes that you have the necessary dbt packages, such as `array` and `dbt_utils`, installed and configured in your dbt project.



@WITH base_monthly_features AS (
SELECT
PTY_ID, AGRMNT_ID, txn_month, txn_year,
--CASH_OUTFLOW
SUM (CASE WHEN CRT_DBT_IND = 'Debit'
AND OW_FINAL CATEGORY _1 l= 'Exclusion' THEN EVENT_AM ELSE 0 END)
AS CASH_OUTFLOW,
- - CASH_OUTFLOW_COUNT
COUNT (CASE WHEN CRT_DBT_IND = 'Debit' AND OW_FINAL_CATEGORY_1 != 'Exclusion'
AS CASH_OUTFLOW_COUNT,
- - CORPORATION_TAX
SUM(CASE WHEN CRT_DBT_IND = 'Debit'
AND OW_FINAL_CATEGORY_2 = 'Taxes - Corporation' THEN EVENT_AM ELSE 0 END)
AS CORPORATION_TAX,
--TAX_EXPENSES
SUM(CASE WHEN CRT_DBT_IND = 'Debit*
AND OW_FINAL_CATEGORY_1 = 'Taxes' THEN EVENT_AM ELSE ® END)
AS TAX_EXPENSES,
- UTILITY_EXPENSES
SUM(CASE WHEN CRT_DBT_IND = 'Debit'
AND OW_FINAL_CATEGORY_1 = 'Utilities' THEN EVENT_AM ELSE 0 END)
AS UTILITY_EXPENSES,
-- GROSS_CASH_INFLOW
SUM(CASE WHEN CRT_DBT_IND = 'Credit'
AND OW_FINAL_CATEGORY_1 l= 'Exclusion' THEN EVENT_AM ELSE 0 END)
AS GROSS_CASH_INFLOW,
- LOANS_CREDIT
SUM(CASE WHEN CRT_DBT_IND = 'Credit'
AND OW_FINAL_CATEGORY_1 = 'Loans' THEN EVENT_AM ELSE O END)
AS LOANS_CREDIT,
- -TAXES_CREDIT_CREDIT
SUM(CASE WHEN CRT_DBT_IND = 'Credit'
AND OW_FINAL_CATEGORY _2 = 'Taxes - Credit' THEN EVENT_AM ELSE O END)
AS TAXES_CREDIT_CREDIT,
-DIRECTOR_PAYMENT_CREDIT
SUM(CASE WHEN CRT_DBT_IND = 'Credit'
AND OW_FINAL_CATEGORY_1 IN('Director Payment', 'Director Payment Secondary') TH AS DIRECTOR_PAYMENT_CREDIT,
-CASH_WITHDRAWALS
SUM(CASE WHEN CRT_DBT_IND = 'Debit'
AND OW_FINAL_CATEGORY_1 = 'Cash Withdrawals' THEN EVENT_AM ELSE 0 END)
AS CASH_WITHDRAWALS,
-INTRA_GROUP_IN
SUM(CASE WHEN CRT_DBT_IND = 'Credit'
AND OM_FINAL CATEGORY_1 = "InIna-group Transfer' THEN EVENT_AM ELSE O END)
AS INTRA_GROUP_IN,
-VAT
SUM(CASE WHEN CRT_DBT_IND = 'Debit'
AND OW_FINAL_CATEGORY_2 = 'Taxes - VAT' THEN EVENT_AM ELSE 0 END)
AS VAT,
- -CASH_FLOW_GROSS
SUM(CASE WHEN OW_FINAL_CATEGORY_1 I= 'Exclusions'
THEN EVENT_AM ELSE 0 END)
AS CASH_FLOW_GROSS,
--DEBIT_COUNT
COUNT (CASE WHEN CRT_DBT_IND = 'Debit' AND OW_FINAL_CATEGORY_1 I= 'Exclusions' THE
AS DEBIT_COUNT,
- -INVOICE_FINANCE
SUM (CASE WHEN CRT_DBT_IND = 'Credit'
AND OW_FINAL_CATEGORY_1 = 'Invoice Finance' THEN EVENT_AM ELSE NULL END)
AS INVOICE_FINANCE,
- - INTRA_GROUP_OUT
SUM(CASE WHEN CRT_DBT_IND = 'Debit'
AND OW_FINAL_CATEGORY_1 = 'Intra-group Transfer' THEN EVENT_AM ELSE NULL END)
AS INTRA_GROUP_OUT
FROM { source (' sre_schema', 'tesowcurated") ]} GROUP BY PTY_ID, txn_year, txn_month


# steps.py

from behave import given
import subprocess

@given('I have loaded test data into my BigQuery table using dbt seed')
def load_test_data_using_dbt_seed(context):
    # Define parameters for dbt seed command
    seed_command = ['dbt', 'seed']
    parameters = ['--option', 'value']  # Add any parameters you need here

    # Combine seed command and parameters
    seed_command.extend(parameters)

    # Run dbt seed command with parameters
    try:
        subprocess.run(seed_command)
        print("Test data loaded into BigQuery table using dbt seed.")
    except Exception as e:
        print(f"Error loading test data using dbt seed: {e}")
        raise e

# my_feature.feature

Feature: Testing my_dbt_model
  As a data engineer
  I want to verify the behavior of my_dbt_model

  Scenario: Verify that my_dbt_model produces expected results
    Given I have loaded test data into my database
    When I run the my_dbt_model transformation
    Then the output table should contain the expected data

# steps.py

from behave import given, when, then
import subprocess

@given('I have loaded test data into my database')
def load_test_data(context):
    # Implement logic to load test data into the database
    pass

@when('I run the my_dbt_model transformation')
def run_dbt_model(context):
    # Run the dbt model using subprocess or dbt Python API
    subprocess.run(['dbt', 'run'])

@then('the output table should contain the expected data')
def verify_output_table(context):
    # Implement logic to verify the output table contains expected data
    pass

# steps.py

from behave import given
import subprocess

@given('I have loaded test data into my BigQuery table using dbt seed')
def load_test_data_using_dbt_seed(context):
    # Run dbt seed command to load test data into BigQuery table
    try:
        subprocess.run(['dbt', 'seed'])
        print("Test data loaded into BigQuery table using dbt seed.")
    except Exception as e:
        print(f"Error loading test data using dbt seed: {e}")
        raise e

# steps.py

from behave import given
import subprocess

@given('I have loaded test data into my BigQuery table using dbt seed')
def load_test_data_using_dbt_seed(context):
    # Define parameters for dbt seed command
    seed_command = ['dbt', 'seed']
    parameters = ['--option', 'value']  # Add any parameters you need here

    # Combine seed command and parameters
    seed_command.extend(parameters)

    # Run dbt seed command with parameters
    try:
        subprocess.run(seed_command)
        print("Test data loaded into BigQuery table using dbt seed.")
    except Exception as e:
        print(f"Error loading test data using dbt seed: {e}")
        raise e

